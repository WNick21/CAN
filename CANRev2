// CAN Receive Example
//

#include "mcp_can.h"
#include <SPI.h>
#include<string.h>

//CAN receive variables
long unsigned int rxId;
unsigned char len = 0;
unsigned char rxBuf[8];
char msgString[128];                        // Array to store serial string

//CAN send variables
unsigned long prevTX = 0;                                        // Variable to store last execution time
const unsigned int invlTX = 1000; 
byte data[] = {0xAA, 0x55, 0x01, 0x10, 0xFF, 0x12, 0x34, 0x56};  // Generic CAN data to send


#define CAN0_INT 9                              // Set INT to pin 9
MCP_CAN CAN0(10); // Set CS to pin 10

#define SW 0 //Set up Switch

const uint8_t WriteOut = 0b00001111;
const uint8_t EMask = 0b00001000;
const uint8_t RSMask = 0b00000100;

const uint8_t IntMask = 0b00000010; //Mask of interrupt pin
const uint8_t SwitchMask = 0b00000001; // Mask for switch
int k =0;


void setup()
{
  Serial.begin(115200);

  DDRD = 0b11111100; //Setting the 4 most significant bits to output to leave least significant open for debuging, 3 = E, 2 = RS 
  PORTD = 0b00000000; //no pull up resistors

  //DDRB = 0b00110000;
  DDRB = 0b00011000; // Set up port B. 0 = switch, 1 = interrupt, 2 = CS, 3 = SI, 4 = SO, 5 = SCK, 
  PORTB = 0b00000001; //Put on pull up resistors
 
  // Initialize MCP2515 running at 16MHz with a baudrate of 500kb/s and the masks and filters disabled.
  if(CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK)
    Serial.println("MCP2515 Initialized Successfully!");
  else
    Serial.println("Error Initializing MCP2515...");
 
  //CAN0.setMode(MCP_NORMAL);                     // Set operation mode to normal so the MCP2515 sends acks to received data.
 

  pinMode(CAN0_INT, INPUT);                            // Configuring pin for /INT input
 
  Serial.println("MCP2515 Library Receive Example...");


  //Begin LCD Init
delay(15);
//wait 15 ms;
writeInit(0x30); // reset in 8-bit mode, D[3:0] ignored
delayMicroseconds(4100);
//wait 4.1 ms;
writeInit(0x30); // reset in 8-bit mode, D[3:0] ignored
delayMicroseconds(100);
//wait 100 μs;
writeInit(0x30); // reset in 8-bit mode, D[3:0] ignored
delayMicroseconds(5000);
//wait 5 ms;
writeInit(0x20); // convert to 4-bit mode
delayMicroseconds(50);
// 50 μs;
 initLCD();
  
}

/*
 * writeCommands writes commands to the LCD
 */
void writeCommand(uint8_t Arg){
PORTD &= ~RSMask; //RS = 0
PORTD |= EMask; //E = 1
PORTD = ((PORTD & 0b00001111)|(Arg & 0b11110000));
    //write Arg[7:4];
    delayMicroseconds(4);
    PORTD &= ~EMask;
    delayMicroseconds(4);
    PORTD |= EMask;
    //E = 1;
    PORTD = ((PORTD & 0b00001111)|((Arg << 4) & 0b11110000));
  //  write Arg[3:0];
    delayMicroseconds(4);
    PORTD &= ~EMask;
    //return;
}

/*
 * writeInit initializes the LCD to recieve codes
 */
void writeInit(uint8_t Arg){
  PORTD &= ~RSMask; //RS = 0
  PORTD |= EMask; //E = 1
  PORTD = ((PORTD & 0b00001111)|(Arg & 0b11110000));
  delayMicroseconds(4);
  PORTD &= ~EMask;
  //return;
}

/*
 * writeData writes characters to the LCD
 */
void writeData(uint8_t Arg){
PORTD |= RSMask; //RS = 1
PORTD |= EMask; //E = 1
PORTD = ((PORTD & 0b00001111)|(Arg & 0b11110000));//Write to upper 4 bits
    //write Arg[7:4];
    delayMicroseconds(4);
    PORTD &= ~EMask;
    delayMicroseconds(4);
    PORTD |= EMask;
    //E = 1;
    PORTD = ((PORTD & 0b00001111)|((Arg << 4) & 0b11110000));//Write to lower 4 bits
  //  write Arg[3:0];
    delayMicroseconds(4);
    PORTD &= ~EMask;
    delayMicroseconds(4);
}

/*
 * Function to clear LCD
 */
void LCDClear(){
  writeCommand(0x01); // clear display, home cursor
delayMicroseconds(2000);
}

/*
 * Function to initialize LCD
 */

void initLCD(){
  writeCommand(0x2C); // 2 lines, 5x11 dot matrix
delayMicroseconds(50);
//wait 40 μs;
writeCommand(0x08); // display off, cursor off, blink off
delayMicroseconds(50);
//wait 40 μs;
writeCommand(0x01); // clear display, home cursor
delayMicroseconds(2000);
//wait 1.64 ms;
writeCommand(0x06); // shift cursor right, do not shift display
delayMicroseconds(50);
////wait 40 μs;
writeCommand(0x0F); // display on, cursor on, cursor blink (last three bits)
delayMicroseconds(50);
//wait 40 μs;
return;
}


/*
 * Functin to write a srting to the LCD
 */
void writeString(char Arg[]){
int  x = strlen(Arg);//Get the length of the word
  for(int i = 0; i<x; i++){
    writeData(Arg[i]);//Write the Character
    delayMicroseconds(50);
  }
}




void loop()
{

//while(pin 5 is high)


  //end while loop
  
  if(!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
  {
    CAN0.readMsgBuf(&rxId, &len, rxBuf);      // Read data: len = data length, buf = data byte(s)
   
    if((rxId & 0x80000000) == 0x80000000){     // Determine if ID is standard (11 bits) or extended (29 bits)
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (rxId & 0x1FFFFFFF), len);
    }
    else{
      LCDClear();//clear screen for new message
    writeString(msgString); //write the string to the LCD
      sprintf(msgString, "Standard ID: 0x%.3lX       DLC: %1d  Data:", rxId, len);
    }

    Serial.print(msgString);
 
    if((rxId & 0x40000000) == 0x40000000){    // Determine if message is a remote request frame.
      sprintf(msgString, " REMOTE REQUEST FRAME");
      Serial.print(msgString);
    } else {
      for(byte i = 0; i<len; i++){
        sprintf(msgString, " 0x%.2X", rxBuf[i]);
        Serial.print(msgString);
////////////////////////////////////////////////////
    /*
     * This while loop is used to hold for user input in order to send the message
     */
     /*
        k = 0;//This value is used for the switch input logic found below
        while (k<1){
         if(SwitchIn() == 1){// Code for switch input
          delay(300);
         writeString("Sent");//Write confirmation to LCD
         delayMicroseconds(40);
         SendIt(data);
         k = 1;
        }
       }
       */
       ////////////////////////////////////
      }
    }
       
    Serial.println();
  }

//Test for feedback loop////////////////////////////////////////////////////////////////////////
    if(millis() - prevTX >= invlTX){                    // Send this at a one second interval. 
    prevTX = millis();
    byte sndStat = CAN0.sendMsgBuf(0x100, 0, 8, data);
    Serial.println(sndStat);
    if(sndStat == CAN_OK)
      Serial.println("Message Sent Successfully!");
    else
      Serial.println("Error Sending Message...");

  }
  //////////////////////////////////////////////////////////////////////////////////////////////
}

/*
 * Function to read switch input
 */
uint8_t SwitchIn()
{
 //Because the switches are active LOW the input must be inverted
 return (~PINB & SwitchMask);
}

/*
 * Function to send messages
 */
void SendIt(byte data){
    // send data:  ID = 0x100, Standard CAN Frame, Data length = 8 bytes, 'data' = array of data bytes to send
  byte sndStat = CAN0.sendMsgBuf(0x100, 0, 8, data);
  if(sndStat == CAN_OK){
    Serial.println("Message Sent Successfully!");
  } else {
    Serial.println("Error Sending Message...");
  }
  delay(100);   // send data per 100ms
}

/*
 * funtion to read interrupt pin
 */
uint8_t Interrupt()
{
  uint8_t trigger = (~PINB & IntMask);
  return trigger;
}


//itoa(Number, Buff, 10)
//Number takes the number sent, convert to decimal, conver to decimal string
//Butt = char Buff[3]
